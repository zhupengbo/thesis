<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="nofollow"/>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperTime最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF9900}
a.orange:visited {color:#FF9900}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
span.gray:hover {color:#000000}

.red{color:#FF0000}
span.red:hover {color:#000000}
.orange{color:#FF9900}
span.orange:hover {color:#000000}

a{TEXT-DECORATION:none}
a:hover{TEXT-DECORATION:underline;}
.conNum1{padding:0 5px;height:20px;border:1px solid #ccc;}
.paper .autotype3{color:#FF0000;}
.paper .autotype2{color:#FFA500;}
-->
</style>
<script type="text/javascript" src="jquery-1.8.2.min.js"></script>
</head>
<body>
<div class="zhengwen">
		    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>1</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/0.htm' target='right'><span class='orange'>随着互联网的普及,恶意代码的危害也变得越来越来越难以控制。</span></a><span class='green'></span><a href='../sentence_detail/1.htm' target='right'><span class='orange'>各种病毒、木马、蠕虫等恶意代码在网络间广泛传播,</span></a><span class='green'></span><a href='../sentence_detail/2.htm' target='right'><span class='orange'>已经给个人、企业甚至政府带来了难以估量的损失。</span></a><span class='green'></span><a href='../sentence_detail/3.htm' target='right'><span class='orange'>据国内知名互联网安全厂商奇虎360发布的《2016年中国互联网安全报告》显示,</span></a><span class='green'></span><a href='../sentence_detail/4.htm' target='right'><span class='red'>2016年全年,360互联网安全中心共截获PC端新增恶意程序样本1.9亿个。</span></a><span class='green'></span><a href='../sentence_detail/5.htm' target='right'><span class='red'>敲诈者病毒在国内发生两次大规模传播,全国至少有497多万台用户电脑遭到了敲诈者病毒攻击。</span></a><span class='green'></span><a href='../sentence_detail/6.htm' target='right'><span class='red'>通过对受害者调研,42.6%的受害者不知道感染病毒的原因。</span></a><span class='green'></span><a href='../sentence_detail/7.htm' target='right'><span class='red'>预计在2017年敲诈者会增长10倍,且利用挂马攻击也将再次爆发。</span></a><span class='green'></span><a href='../sentence_detail/8.htm' target='right'><span class='red'>2016年360互联网安全中心共截获Android平台新增恶意程序样本1403.3万个,其中资费消耗类程序为74.2%。</span></a><span class='green'></span><a href='../sentence_detail/9.htm' target='right'><span class='red'>同PC端相似,手机端勒索软件也开始爆发,360全年截获新增手机勒索软件17万,170万台手机遭到攻击。</span></a><span class='green'></span><a href='../sentence_detail/10.htm' target='right'><span class='red'>在截获盗取个人信息的手机恶意程序样本中,67.4%的样本会窃取短信信息,34.8%的样本会窃取手机银行信息,10.0%的样本会窃取手机联系人信息,3.7%的样本会窃取手机通话记录,2.0%的样本会窃取社交软件(例如微信、QQ等)聊天记录,1.8%的样本会窃取手机录音信息,0.1%的样本会窃取手机照片信息。</span></a><span class='green'></span><a href='../sentence_detail/11.htm' target='right'><span class='red'>根据中国互联网安全报告显示,以下是2017年上半年5大典型安全威胁事件:</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>2</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/12.htm' target='right'><span class='red'>(1)2017年上半年“WannaCry”、“暗云Ⅲ”、“Petya”等多种类型的病毒木马连续集中的爆发,为社会和行业敲响了网络安全的警钟。</span></a><span class='green'></span><a href='../sentence_detail/13.htm' target='right'><span class='red'>《报告》显示,仅2017年上半年,腾讯安全反病毒实验室在电脑端总计已拦截病毒已超过10亿次,平均每月拦截木马病毒近1.7亿次,相较于2016下半年病毒拦截总量增长30%。</span></a><span class='green'></span><a href='../sentence_detail/14.htm' target='right'><span class='red'>其中,受“WannaCry”刺激,勒索类病毒仅第二季度就新增了13.39%,但“WannaCry”在非感染型敲诈类病毒占比中仅排第三,而带有感染传播方式的PolyRansom勒索病毒传播力更巨大,</span></a><span class='green'></span><a href='../sentence_detail/15.htm' target='right'><span class='red'>其占所有勒索类病毒的78.84%。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>3</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/16.htm' target='right'><span class='red'>(2)国务院某App的H5遭遇流量劫持。</span></a><span class='green'></span><a href='../sentence_detail/17.htm' target='right'><span class='red'>5月中旬,某国字号的App遭遇流量劫持的传闻在业界流传。</span></a><span class='green'></span><a href='../sentence_detail/18.htm' target='right'><span class='red'>有消息称,该App某H5页面被植入色情内容广告,经排查“基本确定为用户当地运营商http劫持导致H5页面被插入广告……”。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>4</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/19.htm' target='right'><span class='red'>(3)12306官方网站再现安全漏洞。</span></a><span class='green'></span><a href='../sentence_detail/20.htm' target='right'><span class='red'>4月21,有媒体记者发现在12306官方网站订票时发现,当退出个人账号,网站页面竟自动转登他人账号,且与账号相关联的身份证号、联系方式等个人信息均可见,随后记者在该页面点击常用联系人选项时页面再次刷新并显示他人账号及账号涵盖的所有信息。</span></a><span class='green'></span><a href='../sentence_detail/21.htm' target='right'><span class='red'>而记者尝试在网站账户页面的个人信息栏等其他选项进行操作,点击进入后均得到不同的个人身份信息。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>5</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/22.htm' target='right'><span class='orange'>(4)上亿优酷信息数据在暗网售卖。</span></a><span class='green'></span><a href='../sentence_detail/23.htm' target='right'><span class='red'>4月17日,外国媒体hackread报道,100759591条优酷账户信息数据库在暗网售卖,该数据库售卖价格定为比特币 0.2559,,人民币约 2065.56 元。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>6</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/24.htm' target='right'><span class='red'>(5)“土耳其犯罪家庭”的网络犯罪团伙掌握3亿苹果帐户。</span></a><span class='green'></span><a href='../sentence_detail/25.htm' target='right'><span class='red'>3月底,国外媒体报道,自称为“土耳其犯罪家庭”的网络犯罪团伙,通过电子邮件告知苹果公司他们掌握了超过3亿苹果帐户,并能远程清除所有装置的内容。</span></a><span class='green'></span><a href='../sentence_detail/26.htm' target='right'><span class='red'>他们宣表示只想苹果支付75000美元的比特币赎金,或者价值10万美元的iTunes礼品卡。</span></a><span class='green'></span><a href='../sentence_detail/27.htm' target='right'><span class='red'>若苹果公司在4月7日拒绝遵守他们的要求,他们将大量清除iCloud帐户。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>7</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/28.htm' target='right'><span class='orange'>在所有的网络安全事件中,尤以恶意代码的危害性最大,其带来的经济损失占很大比例。</span></a><span class='green'>从八十年代初期开始出现第一个病毒开始,</span><a href='../sentence_detail/29.htm' target='right'><span class='orange'>到如今恶意代码的不断发展壮大,</span></a><span class='green'>入侵与防护的战役从未停止。</span><a href='../sentence_detail/30.htm' target='right'><span class='orange'>纵观恶意代码发展历史,在利益的驱使下,无论其发展速度还是其破坏性都在不断增强,</span></a><span class='green'>并且为了对抗杀毒软件的检测,各种抗查杀技术的应用,</span><a href='../sentence_detail/31.htm' target='right'><span class='orange'>使得恶意代码变得越来越复杂,从简单的AppleII病毒发展到复杂的内核病毒。</span></a><span class='green'></span><a href='../sentence_detail/32.htm' target='right'><span class='red'>恶意代码的传播机制也发生了很大的变化,</span></a><span class='green'>从以前的被动传播到如今的主动传播。</span><a href='../sentence_detail/33.htm' target='right'><span class='orange'>由于现在出现了很多恶意代码的编制工具,并且极易获得,使得恶意代码制造成本越来越低,所以恶意代码的发布变得越来越频繁。</span></a><span class='green'></span><a href='../sentence_detail/34.htm' target='right'><span class='orange'>恶意代码的发展,给个人、企业以及政府带来的损失时难以估量的,</span></a><span class='green'></span><a href='../sentence_detail/35.htm' target='right'><span class='orange'>据统计80%以上的用户曾有意识或者无意识的遭受过恶意代码的侵袭。</span></a><span class='green'>现如今,提高互联网安全已经成为国家的一项重要基本战略。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>8</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>1.1.2 课题意义</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>9</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>很大一部分网络安全事件发生都是由恶意代码引起的,并且根据以往案例来看,往往都是恶意代码造成一定的损失之后,针对该恶意代码的分析及检测技术才会被提出。出现这种情况的原因无非有两个:首先是恶意代码越来越复杂,并且种类繁多,传播形式多种多样,使得用户很容易被感染;</span><a href='../sentence_detail/36.htm' target='right'><span class='orange'>其次是恶意代码检测技术不够成熟,</span></a><span class='green'>尽管很多学者为恶意代码检测做了很多研究,也提出了很多检测方法,但是理论到应用总是需要时间,而这些时间给了恶意代码去进一步变异的可能。此消彼长下,恶意代码的危害始终存在,而检测与反检测的斗争不会停止。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>10</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>恶意代码能够在短时间内造成大范围传播的原因主要是信息共享技术和使用的普及。信息共享作为时代发展的必然产物,与人方便的同时,也给不法分子打开了新世界的大门,信息的快速流动加速了恶意代码的入侵。无论是Internet上的网页,还是光盘、U盘甚至接收到的Email都有可能携带恶意代码,防不胜防。可是时代的发展又离不开信息的共享技术,机遇与挑战并存,因噎废食是不明智也是不可取的。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>11</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>近年来,恶意代码的使用与各种各样的经济甚至政治利益互相牵扯,其危害性和隐藏性日益增强,破坏的目标、目的以及要达成的后果更加具有针对性。</span><a href='../sentence_detail/37.htm' target='right'><span class='orange'>而恶意代码的编写者也从最初的技术炫耀逐渐变为经济或者政治利益的追逐者。</span></a><span class='green'></span><a href='../sentence_detail/38.htm' target='right'><span class='red'>中国木马产业链一年的收入已逾上百亿元,</span></a><span class='green'>黑色产业链正在逐渐成型。</span><a href='../sentence_detail/39.htm' target='right'><span class='orange'>恶意代码的检测与反检测注定会是一场持久战。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>12</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/40.htm' target='right'><span class='orange'>综上所述,恶意代码的危害无处不在,</span></a><span class='green'></span><a href='../sentence_detail/41.htm' target='right'><span class='orange'>不仅给个人、企业带来了巨大的损失,</span></a><span class='green'>甚至可能给国家安全带来不可预期的危害。</span><a href='../sentence_detail/42.htm' target='right'><span class='orange'>对于个人,恶意代码的入侵会导致个人隐私的泄露,造成经济或者名誉损失;对于企业来说,企业数据一旦遭到恶意代码的入侵,会导致企业大量数据资产外泄,给企业带来无可挽回的损失,甚至因此产生一些灰色的产业链;</span></a><span class='green'></span><a href='../sentence_detail/43.htm' target='right'><span class='orange'>对于国家,信心安全是国家安全的重点组成部分,网路安全已经是国策和民生的大问题,信息安全成为国家战略,随着互联网的发展,</span></a><span class='green'>信息安全的问题将会更加突出和重要。</span><a href='../sentence_detail/44.htm' target='right'><span class='orange'>因此研究更加有效的恶意代码检测技术是非常具有现实意义的。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>13</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>1.2国内外研究现状</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>14</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/45.htm' target='right'><span class='red'>自1981年第一个病毒 Apple II[2]出现以来,国内外许多计算机安全的学者 便投身于与恶意代码的对抗过程中。</span></a><span class='green'></span><a href='../sentence_detail/46.htm' target='right'><span class='red'>恶意代码编写技术的发展也推动了检测技 术的发展,直到现在已经有很多恶意代码检测技术被广泛应用。</span></a><span class='green'></span><a href='../sentence_detail/47.htm' target='right'><span class='red'>Sung[3]等人提出了基于系统调用的静态恶意代码检测方法,主要针对恶意代码的变种。</span></a><span class='green'></span><a href='../sentence_detail/48.htm' target='right'><span class='red'>该方法是将恶意代码反汇编并根据反汇编后的文本信息提取系统调用序列,并通过系统调用序列的相似度来判断。</span></a><span class='green'></span><a href='../sentence_detail/49.htm' target='right'><span class='red'>基于系统调用序列方法也可以用在动态检测过程中,在虚拟环境中执行恶意程序时可以提取执行时的系统调用序列,并使用n-gram算法来提取特征,然后进行分类。</span></a><span class='green'></span><a href='../sentence_detail/50.htm' target='right'><span class='red'>张波云[4]等人在虚 拟环境中动态获得可执行文件的系统调用序列,并使用 n-gram 算法提取特征,使用粗糙集理论对特征降维并使用支持向量机实施分类。</span></a><span class='green'></span><a href='../sentence_detail/51.htm' target='right'><span class='red'>为了解决混淆技术带来的困惑,一些学者研究基于程序的语义分析方法。</span></a><span class='green'></span><a href='../sentence_detail/52.htm' target='right'><span class='red'>语义分析是通过形式化抽象指令运行时的语义,通过符号执行[5]、模型检验[6]、逻辑推理证明等方法来分析程序的语义信息。</span></a><span class='green'>Cousot.P 和 Cousot.</span><a href='../sentence_detail/53.htm' target='right'><span class='red'>R[7]提出了程序分析构造和逼近不动点语义理论,这为程序的语义分析提供了理论基础。</span></a><span class='green'></span><a href='../sentence_detail/54.htm' target='right'><span class='red'>M.Christodorescu[8]引入抽象模式库作为恶意行为自动机的符号,将恶意行为表示为带未解释符号的自动机,最后使用模型检验来实现检测。</span></a><span class='green'></span><a href='../sentence_detail/55.htm' target='right'><span class='red'>随后他提出一种基于语义的检测方法,用迹语义来描述恶意代码的行为,采用抽象解释方法检测恶意行为[9]。</span></a><span class='green'></span><a href='../sentence_detail/56.htm' target='right'><span class='red'>D.Preda[10]也借鉴了抽象解释的思想,证明了关于混淆技术产生的恶意代码检测的正确性和完备性。</span></a><span class='green'></span><a href='../sentence_detail/57.htm' target='right'><span class='red'> Singh[11]通过分析反汇编文本的数据流信息,利用线性时态逻辑语义模型检测恶意行为。</span></a><span class='green'></span><a href='../sentence_detail/58.htm' target='right'><span class='red'>Kinder[12]分析了程序的控制流程图和函数之间的调用关系,用计算逻辑树描述恶意行为并公式化,最终使用模型检测方法检测。</span></a><span class='green'></span><a href='../sentence_detail/59.htm' target='right'><span class='red'>李佳静[13]等人提出了一种基于语义的行为分析方法,对函数调用及函数调用序列之间的依赖关系进行了详细的描述,该方法能准确描述恶意行为并有很好的泛化能力。</span></a><span class='green'></span><a href='../sentence_detail/60.htm' target='right'><span class='red'>用有穷自动机描述恶意行为,并引入数据流分析使用下推自动机描述程序的全局状态空间以提高分析精度,最终使用模型检测器实现检测。</span></a><span class='green'></span><a href='../sentence_detail/61.htm' target='right'><span class='red'>王晓洁和王海峰[14]提出一种基于语义模型匹配的检测算法,通过语义描述恶意代码的行为,这样对经过代码混淆技术处理的恶意代码的检测有很好的效果。</span></a><span class='green'></span><a href='../sentence_detail/62.htm' target='right'><span class='red'>孔德光[15]等人提出一种结合语义的多态蠕虫的签名提取算法,提高了检测的鲁棒性和准确性。</span></a><span class='green'></span><a href='../sentence_detail/63.htm' target='right'><span class='red'>G.Tahan[16]等人提出了一种新的自动签名提取算法,该算法 主要针对恶意的可执行文件,被应用到高速恶意代码过滤装置中。</span></a><span class='green'></span><a href='../sentence_detail/64.htm' target='right'><span class='red'>Y.Tang[17]等人提出了一种利用多序列对比技术的简化的正则表达式签名算法,这种方法能产生更加准确的基于漏洞的签名。</span></a><span class='green'></span><a href='../sentence_detail/65.htm' target='right'><span class='red'>Y.Chen[18]等人提出了在网络层没有任何主机分析的蠕虫执行的脆弱性驱动的签名,实验效果非常好。</span></a><span class='green'></span><a href='../sentence_detail/66.htm' target='right'><span class='red'>现有的基于签名的恶意代码检测技术通过特殊的字符串特征来判断,其准确率非常高,但是其缺点是不能检测新出现的恶意代码,并且需要不断的更新特征库。</span></a><span class='green'></span><a href='../sentence_detail/67.htm' target='right'><span class='red'>现在大部分研究用基于 n-gram 序列的字节序列代替二进制特征码序列,这会提高分类的准确率。</span></a><span class='green'></span><a href='../sentence_detail/68.htm' target='right'><span class='red'>Robert[19]等人提出了用操作码序列作为特征,然后使用文本分类的方法实现检测,并解决了数据不平衡问题[20]。</span></a><span class='green'></span><a href='../sentence_detail/69.htm' target='right'><span class='red'>Schultz[21]等人第一次提出了应用数据挖掘模型来检测恶意代码,他们提取三种特征并使用不同的分类方法:程序的头文件信息,字符串信息,字节的序列,应用基于签名、基于规则的学习器 Pipper、朴素贝叶斯等方法进行分类。</span></a><span class='green'></span><a href='../sentence_detail/70.htm' target='right'><span class='red'> 研究表明使用机器学习方法能提高准确率。</span></a><span class='green'></span><a href='../sentence_detail/71.htm' target='right'><span class='red'>后来 Kolter[22]使用 n-gram 算法提取 字节序列作为特征,改进的决策树算法取得了很好的分类效果。</span></a><span class='green'></span><a href='../sentence_detail/72.htm' target='right'><span class='red'> 在参考文献[23]中,作者提出了使用 n-gram 算法提取特征后使用信息增益 的方法来选择一些分类效果好的特征,并使用 K 近邻,基于 TFIDF 的分类器、 朴素贝叶斯、支持向量机、决策树等分类方法,并取得了很好的实验效果。</span></a><span class='green'></span><a href='../sentence_detail/73.htm' target='right'><span class='red'> Kolterh 和 Maloof[22]研究了恶意代码的家族的分类,基于恶意代码的功能行 为,使用多分类方法将恶意代码分为蠕虫、木马、后门、病毒等,这更加细化 了分类的结果,有助于对每一种恶意代码的研究,发现它们的共性,这也为以 后的语义分析等方法奠定了基础。</span></a><span class='green'></span><a href='../sentence_detail/74.htm' target='right'><span class='red'>文献[24]中作者提出了一个层次特征选择的方法,即使用 n-gram 算法提取特征后选择那些出现频率高于某个阈值的特征, 这种方法对于检测恶意代码的变种很有效。</span></a><span class='green'></span><a href='../sentence_detail/75.htm' target='right'><span class='red'>Raja[25]等人应用数据挖掘方法实现 恶意代码的检测,他通过反汇编技术提取了恶意代码的操作码序列,使用了一 种新的在文本分类领域的特征选择方法 CPD(Categorical Proportional Difference)。</span></a><span class='green'></span><a href='../sentence_detail/76.htm' target='right'><span class='red'> CPD 用来度量一个特征的区分能力,最终分类效果相对比较好。</span></a><span class='green'></span><a href='../sentence_detail/77.htm' target='right'><span class='red'>Dolev[26]提倡使用操作码来作为恶意代码的中间表示。</span></a><span class='green'></span><a href='../sentence_detail/78.htm' target='right'><span class='red'>操作码是机器语言的一个操作的一部分,它包含着指令的行为和程序的控制。</span></a><span class='green'></span><a href='../sentence_detail/79.htm' target='right'><span class='red'>近年来,操作码特征已经被用来检测蠕虫的变种和一些间谍软件[27]。</span></a><span class='green'></span><a href='../sentence_detail/80.htm' target='right'><span class='red'>将操作码提取出来作为标签,然后产生签名来判别恶意代码的变种。</span></a><span class='green'></span><a href='../sentence_detail/81.htm' target='right'><span class='red'>后来有些学者提取操作码并将其转化成操作码序列来检测未知的恶意代码[19],实验使用三种分类算法取得了很好的实验 效果。</span></a><span class='green'></span><a href='../sentence_detail/82.htm' target='right'><span class='orange'>在文献[28]中,作者提出了使用变长的指令序列作为特征,并使用 Bagging算法得到了很好的实验效果。</span></a><span class='green'></span><a href='../sentence_detail/83.htm' target='right'><span class='red'>也有人使用了十六进制码作为特征[29]。</span></a><span class='green'></span><a href='../sentence_detail/84.htm' target='right'><span class='red'>在恶意代 码检测技术中使用操作码序列作为特征的研究相对还是比较少的,但是研究结 果发现操作码序列是一种比较好的特征表示方法。</span></a><span class='green'></span><a href='../sentence_detail/85.htm' target='right'><span class='red'> 在文献[30]中,作者使用程序的控制流程图并用三种不同版本的黑客防御工具设计了一个分类算法,并取得了很好的实验效果。</span></a><span class='green'></span><a href='../sentence_detail/86.htm' target='right'><span class='red'>Ismail B[31]提出了将程序控 制流程图和函数调用拓扑用于将未知的恶意代码归类。</span></a><span class='green'></span><a href='../sentence_detail/87.htm' target='right'><span class='red'>使用函数调用拓扑的缺 点是,攻击者能使用相似的函数调用或者改变函数调用的序列来逃避检测。</span></a><span class='green'></span><a href='../sentence_detail/88.htm' target='right'><span class='red'> Halvar[32]利用程序控制流程的拓扑图的同构来实现检测。</span></a><span class='green'></span><a href='../sentence_detail/89.htm' target='right'><span class='red'>因为同一种族的恶意 代码的拓扑图基本相似,这种方法也是适合检测恶意代码的变种。</span></a><span class='green'></span><a href='../sentence_detail/90.htm' target='right'><span class='red'>Igor[33]提出了一个新的检测未知恶意代码族的方法。</span></a><span class='green'></span><a href='../sentence_detail/91.htm' target='right'><span class='red'>该方法是基于操作码序列的出现的频 率,并挖掘了每一个操作码序列的相关性。</span></a><span class='green'></span><a href='../sentence_detail/92.htm' target='right'><span class='red'>通过大量实验对比分析,该方法是 非常有效的。</span></a><span class='green'></span><a href='../sentence_detail/93.htm' target='right'><span class='red'>Perdisci[34]等人提出了从PE文件提取一些特征,如标准和非标准 部分的数目,可执行部分的数量以及 PE 头文件的熵信息,并使用不同的机器 学习模型实现分类。</span></a><span class='green'></span><a href='../sentence_detail/94.htm' target='right'><span class='red'>后来他们开发了一个快速统计恶意代码的检测工具[35]。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>15</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/95.htm' target='right'><span class='red'>综上所述,现有的恶意代码检测技术有很多,每一种方法都有自身的优缺点。</span></a><span class='green'></span><a href='../sentence_detail/96.htm' target='right'><span class='red'>这为后面的研究提供了基础的同时也带来了很多挑战。</span></a><span class='green'></span><a href='../sentence_detail/97.htm' target='right'><span class='red'>本文提出了一种新的恶意代码检测方法,结合了特征码、行为及机器学习的方法,提出了基于操作码序列的静态恶意代码检测方法,能更好的检测恶意代码。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>16</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>1.3研究内容</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>17</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/98.htm' target='right'><span class='orange'>本文改进了一种基于机器学习算法的恶意代码检测方法,</span></a><span class='green'></span><a href='../sentence_detail/99.htm' target='right'><span class='orange'>并基于该方法实现了一个恶意代码检测系统。</span></a><span class='green'>方法主要是使用汇编操作码的抽象化技术将汇编码表示为中间码,并结合Eclat算法对中间码的频繁项集进行分析,预测出一种最优的中间码序列,</span><a href='../sentence_detail/100.htm' target='right'><span class='orange'>然后使用n-gram算法提取中间码特征序列生成概率矩阵,</span></a><span class='green'>作为代表恶意代码的特征,</span><a href='../sentence_detail/101.htm' target='right'><span class='orange'>最后使用机器学习算法进行建模。</span></a><span class='green'>当抽象方式有多种的时候,这种方法能够针对n-gram算法提取出的中间码特征序列,预测出一种对分类效果最好中间码特征序列作为生成概率矩阵的依据。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>18</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>在仿真实验中,本文提供了两种抽象方式,分别记为Abs1和Abs2,Abs1是根据作者的理解对汇编码提出的抽象方式,Abs2是文献[1]中提出了抽象方式,本文将会分别使用本文方法和文献方法进行实验并分析对比实验结果,给出结论。实验主要步骤有:首先,</span><a href='../sentence_detail/102.htm' target='right'><span class='orange'>为了逃避病毒检测系统的检测,一般的恶意代码作者都会对恶意程序进行加壳处理,所以本文的第一步就是对恶意代码进行查壳和脱壳处理;其次对恶意代码样本进行反汇编处理,</span></a><span class='green'>得到样本的汇编文本,并从中提取出汇编操作码序列;然后根据已配置的抽象方式对汇编操作码序列进行抽象化处理,得到各抽象方式对应的中间码序列;</span><a href='../sentence_detail/103.htm' target='right'><span class='orange'>接着使用n-gram算法获得中间码特征序列,</span></a><span class='green'>并对中间码特征序列的频繁项集进行分析,预测对分类效果最明显的中间码特征序列,并依据选择出的中间码特征序列生成概率矩阵;最后对比了随机森林算法、支持向量机以及K邻近三种机器学习算法使用概率矩阵作为输入的分类效果,结果显示随机森林算法效果最为显著和稳定。</span><a href='../sentence_detail/104.htm' target='right'><span class='orange'>另外根据本文提出的方法设计并实现了一个恶意代码检测系统。</span></a><span class='green'>本文的工作有以下几点:</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>19</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>第一:收集实验样本,并对样本进行预处理操作,</span><a href='../sentence_detail/105.htm' target='right'><span class='red'>然后提取基于文本的汇编操作码序列。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>20</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>第二:</span><a href='../sentence_detail/106.htm' target='right'><span class='orange'>本文改进了一种基于机器学习算法的恶意代码检测方法。</span></a><span class='green'>通过汇编操作码抽象化技术、Eclat算法频繁项集分析和n-gram算法提取特征序列获得概率矩阵,</span><a href='../sentence_detail/107.htm' target='right'><span class='orange'>并以此作为代表恶意代码的特征,</span></a><span class='green'></span><a href='../sentence_detail/108.htm' target='right'><span class='orange'>最后使用机器学习算法构建分类模型。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>21</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>第三:</span><a href='../sentence_detail/109.htm' target='right'><span class='orange'>对本文提出的方法进行实验仿真,</span></a><span class='green'></span><a href='../sentence_detail/110.htm' target='right'><span class='orange'>并对实验结果进行对比分析,得出结论。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>22</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>第四:结合实验仿真的结果分析,针对本文提出的改进方法,采用模块化编程技术实现了一个恶意代码检测系统。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>23</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>1.4论文结构</span><br><span class='green'>本文总共分为四章:</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>24</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/111.htm' target='right'><span class='orange'>第一章为绪论,主要介绍课题背景及意义。</span></a><span class='green'></span><a href='../sentence_detail/112.htm' target='right'><span class='orange'>并且详细阐述了国内外对于恶意代码检测技术的研究现状和存在的问题,最后介绍了本文的研究内容和章节安排。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>25</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/113.htm' target='right'><span class='orange'>第二章是相关理论与关键技术。</span></a><span class='green'></span><a href='../sentence_detail/114.htm' target='right'><span class='orange'>首先介绍了恶意代码的定义和分类,然后对现有恶意代码分析技术、检测技术和反检测技术做了相关介绍。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>26</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/115.htm' target='right'><span class='orange'>第三章是基于机器学习算法的恶意代码检测方法。</span></a><span class='green'>首先对汇编操作码的特点进行了分析,并介绍了有关学者对汇编码抽象化的一些研究;然后概要的介绍了本文提出方法的大体流程,接着对方法的各部分进行了详细说明,包括数据预处理、概率矩阵的生成过程和恶意代码的分类;最后根据本文方法进行了实验仿真,</span><a href='../sentence_detail/116.htm' target='right'><span class='orange'>并和传统方法的实验结果进行了对比分析,</span></a><span class='green'>得出结论。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>27</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/117.htm' target='right'><span class='orange'>第四章是系统设计与实现。首先介绍整个系统的架构设计,</span></a><span class='green'>包括系统的功能分析及组成模块,并对各模块的功能进行了简单介绍;接着对各模块的实现方式进行了详细介绍;最后对本章进行总结。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>28</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>第五章为总结与展望。</span><a href='../sentence_detail/118.htm' target='right'><span class='orange'>概括总结了本文的主要研究成果和不足,</span></a><span class='green'></span><a href='../sentence_detail/119.htm' target='right'><span class='red'>对未来的可研究方向进行了展望。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>29</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>第二章 相关理论与关键技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>30</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/120.htm' target='right'><span class='orange'>本章首先介绍了恶意代码相关概念,</span></a><span class='green'>并对现有的恶意代码检测技术以及反检测技术进行了详细介绍;</span><a href='../sentence_detail/121.htm' target='right'><span class='orange'>然后对恶意代码的反检测技术做了相关介绍;</span></a><span class='green'>最后对恶意代码的分析技术做了总结。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>31</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>2.1 恶意代码简介</span><br><span class='green'>2.1.1 恶意代码的定义</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>32</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>恶意代码也成为恶意软件,是对各种敌对和入侵软件的概括性术语。</span><a href='../sentence_detail/122.htm' target='right'><span class='orange'>包括各种形式的计算机病毒、蠕虫、特洛伊木马、勒索软件、间谍软件、广告软件以及其他的恶意软件。</span></a><span class='green'>形式上多种多样,可以是可执行文件、脚本、插件等等。其违背使用者的意愿去执行一些操作,损害用户的利益以达到入侵者不可告人的目的。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>33</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>2.1.2 恶意代码的分类</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>34</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/123.htm' target='right'><span class='orange'>根据不同的依据,恶意代码有很多种不同的分类方法,没有一种标准的分法,但是常见的种类有:</span></a><span class='green'></span><a href='../sentence_detail/124.htm' target='right'><span class='orange'>计算机病毒、蠕虫、特洛伊木马、间谍软件、勒索软件等等。</span></a><span class='green'></span><a href='../sentence_detail/125.htm' target='right'><span class='red'>下面对几种恶意代码做简要介绍:</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>35</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/126.htm' target='right'><span class='red'>(1)计算机病毒。病毒是早期产生的最主要的恶意代码之一,病毒是能够自我繁殖并寄生在其他程序中的代码,这个被寄存的程序被称为宿主程序,但是病毒不能单独运行,必须通过激活宿主程序并满足一定条件下,病毒就能干扰电脑正常工作,扰乱或破坏己有存储的信息,甚至引起整个系统不能正常工作。</span></a><span class='green'></span><a href='../sentence_detail/127.htm' target='right'><span class='red'>一般而言计算机病毒通常由三个单元和一个标志构成:引导模块、感染模块、破坏表现 模块和感染指标。</span></a><span class='green'></span><a href='../sentence_detail/128.htm' target='right'><span class='orange'>1、引导模块是指将计算机病毒感染的宿主程序设法引导安装到</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>36</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>计算机操作系统中,</span><a href='../sentence_detail/129.htm' target='right'><span class='red'>为以后的感染、破坏两个后期模块提供前期的有效准备,一般而言不同的计算机病毒有不同的引导操作,而且引导操作往往是隐蔽的,不易被用户察觉和发现的。</span></a><span class='green'></span><a href='../sentence_detail/130.htm' target='right'><span class='red'>2、感染 模块包括两个部分,一个是用来激活感染功能的判断部分。</span></a><span class='green'>该模块提供一个感染</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>37</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/131.htm' target='right'><span class='orange'>的标志,用来判断计算机是否被感染。</span></a><span class='green'></span><a href='../sentence_detail/132.htm' target='right'><span class='red'>另一个是执行感染功能部分。这一部分主要的功能就是监控宿主满足条件的时机,并及时的将计算机病毒存入到系统特定的位置。</span></a><span class='green'></span><a href='../sentence_detail/133.htm' target='right'><span class='red'>3、破坏表现模块与感染模块一样包括两个部分,一是具有触发破坏表现功能的判断部分。</span></a><span class='green'></span><a href='../sentence_detail/134.htm' target='right'><span class='red'>二是具有破坏表现功能的实施部分。</span></a><span class='green'></span><a href='../sentence_detail/135.htm' target='right'><span class='red'>计算机病毒一般具有寄生 性、传染性、隐藏性、破坏性、潜伏性等特征。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>38</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/136.htm' target='right'><span class='red'>(2)特洛伊木马。木马分为客户端和服务端,客户端安装在攻击者的主机 上是控制端,服务端安装在受害者的机器上。</span></a><span class='green'></span><a href='../sentence_detail/137.htm' target='right'><span class='red'>木马可以使攻击者远程控制受害者的主机,造成受害者信息丢失等问题。</span></a><span class='green'></span><a href='../sentence_detail/138.htm' target='right'><span class='red'>木马有很好的隐蔽性,通过模仿正常的系统文件命名、与其他程序绑定、进程注入及拦截系统调用的方法伪装自己。</span></a><span class='green'></span><a href='../sentence_detail/139.htm' target='right'><span class='red'>木马也有很好的自启动性和自恢复性。</span></a><span class='green'></span><a href='../sentence_detail/140.htm' target='right'><span class='red'>常见木马有远程访问型木马、键盘记录型木马、密码发送型木马、FTP 型木马以及破坏型木马等。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>39</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/141.htm' target='right'><span class='red'>(3)蠕虫。蠕虫是一种可以独立运行、自我复制及自动传播的恶意程序。</span></a><span class='green'></span><a href='../sentence_detail/142.htm' target='right'><span class='red'>它通过网络、共享文件、电子邮件、移动存储设备以及有漏洞的主机等自我复制和传播。</span></a><span class='green'></span><a href='../sentence_detail/143.htm' target='right'><span class='red'>蠕虫的传播速度非常快,根据它的危害性可以简单分为无害型、消耗型和破坏型。</span></a><span class='green'></span><a href='../sentence_detail/144.htm' target='right'><span class='red'>无害型蠕虫感染主机后会产生很多垃圾文件减少系统的可用空间;消耗型蠕虫感染主机后,发送大量扫描数据包,消耗主机的 CPU 和内存资源,与此同时增加了网络的负载,降低网络的性能;破坏型蠕虫感染主机后会 删除和破坏程序和文件,有时会泄露一些重要信息。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>40</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/145.htm' target='right'><span class='red'>(4)后门。它是一种运行在目标系统中,能够绕过安全控制机制获得对系 统的访问权,为攻击者提供通道的恶意代码。</span></a><span class='green'></span><a href='../sentence_detail/146.htm' target='right'><span class='red'>后门可以使攻击者远程控制目标主机,危害无穷。</span></a><span class='green'></span><a href='../sentence_detail/147.htm' target='right'><span class='red'>后门提供的通道有几种类型:本地权限提升、远程命令行访问、单命令远程执行、远程控制等。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>41</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/148.htm' target='right'><span class='red'>(5)Rootkit。它是指帮助攻击者获取主机管理权限后,实现维持拥有管理权限的程序[36]。</span></a><span class='green'></span><a href='../sentence_detail/149.htm' target='right'><span class='red'>通常攻击者通过后门获取管理权限,并使用 Rootkit 维持管理权限使的恶意代码能隐藏在目标系统中。</span></a><span class='green'></span><a href='../sentence_detail/150.htm' target='right'><span class='red'>Rootkit 分为用户模式和内核模式。</span></a><span class='green'></span><a href='../sentence_detail/151.htm' target='right'><span class='red'>用户模式通过通道插入恶意代码、覆盖文件、API 钩子和 DLL 注入等方式达到目的。</span></a><span class='green'></span><a href='../sentence_detail/152.htm' target='right'><span class='red'>而内核模式通过安装恶意的设备驱动程序、打补丁、修改内存中运行的内核以及虚拟伪造系统的方式实现。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>42</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/153.htm' target='right'><span class='red'>(6)间谍软件。它是在未授权的情况下窃取用户的信息并通过网络发送给 攻击者的一种恶意代码。</span></a><span class='green'></span><a href='../sentence_detail/154.htm' target='right'><span class='red'>这种恶意代码不仅仅能泄露目标主机的数据信息,还 可以提供恶意代码的植入接口使得被侵系统受到更加严重的破坏。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>43</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/155.htm' target='right'><span class='red'>(7)广告软件。它是指在未经用户授权的情况下和别的程序捆绑在一起, 以便经常弹出一些用户不想接受的广告。</span></a><span class='green'></span><a href='../sentence_detail/156.htm' target='right'><span class='red'>这种恶意程序目的是通过这种强制的 方式做商业宣传。</span></a><span class='green'></span><a href='../sentence_detail/157.htm' target='right'><span class='red'>一些广告插件的安装会降低主机的性能。</span></a><span class='green'></span><a href='../sentence_detail/158.htm' target='right'><span class='red'>广告软件主要的危 害是弹出一些色情或者恶意的广告,这会给用户带来很大的困扰。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>44</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/159.htm' target='right'><span class='red'>(8)恶意网页脚本。它是指在网页中嵌入一些用脚本语言编写的有恶意行 为的代码。</span></a><span class='green'></span><a href='../sentence_detail/160.htm' target='right'><span class='red'>当用户点击带恶意脚本的网站后,脚本通过修改目标系统的注册表、 下载病毒或者加载木马程序等方式对被侵系统实施破坏行为。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>45</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>2.2 恶意代码检测与反检测技术</span><br><span class='green'>2.2.1 恶意代码检测技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>46</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/161.htm' target='right'><span class='orange'>目前用于商业的恶意代码检测软件中,一般采用的都是基于“特征码”的检测技术,基本思想是,当新的恶意代码被发现后,对其进行采集取样,分析代码构成,提取有用的特征码,然后将新的特征码加入已有数据库中,用户更新病毒库之后,就会使用新的特征库去匹配恶意代码,如果匹配成功则进行相应的处理。</span></a><span class='green'></span><a href='../sentence_detail/162.htm' target='right'><span class='orange'>但是特征码检测技术的缺点是只能对已知恶意代码进行有效的将测,对与未知或者稍加变动的恶意代码无能为力。</span></a><span class='green'></span><a href='../sentence_detail/163.htm' target='right'><span class='red'>因此,在恶意代码检测领域提出了启发式检测算法来预防和检测新的恶意代码。</span></a><span class='green'></span><a href='../sentence_detail/164.htm' target='right'><span class='orange'>根据对恶意代码分析原理的不同对现有恶意代码检测方法进行分类,主要分为基于特征码的检测技术、基于行为的检测技术、基于启发式的检测技术、基于语义的检测方法和基于机器学习算法的检测技术等。</span></a><span class='green'></span><a href='../sentence_detail/165.htm' target='right'><span class='red'>下面将详细介绍几种检测技术。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>47</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(1)基于特征码的检测技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>48</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/166.htm' target='right'><span class='orange'>基于特征码的检测方法是使用最古老和最广泛的方法。</span></a><span class='green'></span><a href='../sentence_detail/167.htm' target='right'><span class='red'>被Symantec等多有著名病毒检测厂商所使用,是目前已知的所有恶意代码检测方法中最简单、开销最小的方法,广泛用于文件类型的病毒检测中。</span></a><span class='green'>检测软件的核心就是恶意代码特征库的完全性,</span><a href='../sentence_detail/168.htm' target='right'><span class='orange'>当需要扫描某个程序是否有恶意企图时,启动特征扫描提取特征,然后再与特征库进行匹配,如果匹成功,则判断该程序是恶意的。</span></a><span class='green'></span><a href='../sentence_detail/169.htm' target='right'><span class='orange'>此技术的关键在于如何选取最能代表恶意程序的特征值。</span></a><span class='green'>采用该方法,检验结果准确,鲜有误报情况,</span><a href='../sentence_detail/170.htm' target='right'><span class='orange'>但该方法对于未知或者变形恶意代码无能为力。</span></a><span class='green'>还有,这种方法使得特征库不断增加,这需要用户经常更新特征库,</span><a href='../sentence_detail/171.htm' target='right'><span class='orange'>随着时间的流逝,特征库会越来越庞大,</span></a><span class='green'>这会影响检测的速度和系统的性能。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>49</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(2)基于行为的检测技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>50</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/172.htm' target='right'><span class='orange'>基于行为的检测方法是利用恶意代码的特有行为来检测恶意代码的方法。</span></a><span class='green'></span><a href='../sentence_detail/173.htm' target='right'><span class='orange'>恶意代码的行为有相对的稳定性和已于检测的特点,比如特定的系统调用,恶意代码要完成自身逻辑功能,即完成对系统的入侵和破坏,就必须获取系统非法权限,调用系统的资源[37],这样通过分析恶意代码的行为就可以方便的分析检测出恶意代码。</span></a><span class='green'></span><a href='../sentence_detail/174.htm' target='right'><span class='red'>当程序运行时,监控其行为,如果发现了异常行为,则立即报警。</span></a><span class='green'></span><a href='../sentence_detail/175.htm' target='right'><span class='red'>一般用于检测恶意代码的行为特征如下:</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>51</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/176.htm' target='right'><span class='orange'>1)	对特定文件执行写操作:有些恶意代码时依附而生,所以在其执行时,就要将自身代码附加在感染文件中,可以监控是否有异常写操作。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>52</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/177.htm' target='right'><span class='orange'>2)	监控系统调用序列:某些系统调用序列可以体现某种程度的程序语义。</span></a><span class='green'></span><a href='../sentence_detail/178.htm' target='right'><span class='orange'>系统调用是用户态和内核态的唯一接口,</span></a><span class='green'>恶意代码想要获取高级权限实施破坏行为,就必然要经过系统调用接口。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>53</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/179.htm' target='right'><span class='orange'>3)	修改内存总量:恶意代码为了完成特定的恶意意图,</span></a><span class='green'></span><a href='../sentence_detail/180.htm' target='right'><span class='orange'>经常会常驻在内存中,并且不能被覆盖,</span></a><span class='green'></span><a href='../sentence_detail/181.htm' target='right'><span class='orange'>那么将会减少系统内存的总量,</span></a><span class='green'>使得该段内存不受系统内核控制。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>54</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(3)基于启发式的检测技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>55</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/182.htm' target='right'><span class='orange'>启发式检测方法是对恶意代码特征提前设定一个阈值,在对文件进行扫描后,当提取的特征和恶意代码特征的相似度达到一定的值,这认定该文件是恶意代码。</span></a><span class='green'></span><a href='../sentence_detail/183.htm' target='right'><span class='red'>例如一些恶意代码都会固定的对一些内核函数进行调用,</span></a><span class='green'></span><a href='../sentence_detail/184.htm' target='right'><span class='orange'>通常这些调用的顺序是有一定的规律,因此利用对内核函数的名称和调用次数进行分析,可以构建一个恶意代码对内核函数的特征。</span></a><span class='green'></span><a href='../sentence_detail/185.htm' target='right'><span class='red'>启发式方法属于主动防御技术,对未知的恶意代码检测具有明显的效果,因此,这种方法在现如今的商业开发被重点应用。</span></a><span class='green'>启发式检测可分为静态启发和动态启发。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>56</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/186.htm' target='right'><span class='orange'>静态启发方法其实是对传统的特征识别方法的一种扩展,通过分析程序对系统API的调用序列作为特征,有领域专家根据自身经验,研究总结出某些恶意代码的行为特征,当对行为进行监控时,此类特征一旦被发现,就立即报警并做相应的处理。</span></a><span class='green'></span><a href='../sentence_detail/187.htm' target='right'><span class='red'>这种方法能够有效的检测出已知的恶意代码,并发现部分未知的恶意代码,但在发现恶意代码的时候,系统往往已经被感染。</span></a><span class='green'></span><a href='../sentence_detail/188.htm' target='right'><span class='orange'>另外,行为检测是对系统进行实时的监控,因此可能会持续占用大量内存、CPU等系统资源。</span></a><span class='green'>在商业领域中,该方法主要用于辅助性检测。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>57</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/189.htm' target='right'><span class='orange'>动态启发式技术主要的工作原理是在计算机系统中划分出一各独立的虚拟环境,当发现可疑程序时,并不立即停止,而是让其继续运行。</span></a><span class='green'></span><a href='../sentence_detail/190.htm' target='right'><span class='orange'>“沙盒”技术就是动态启发式技术的一种,沙盒会对可疑程序的行为进行记录,直到恶意代码完全暴露后,它在执行回滚操作,使计算机恢复到执行可疑程序之前的状态。</span></a><span class='green'></span><a href='../sentence_detail/191.htm' target='right'><span class='orange'>近年来病毒检测厂商已经将沙盒技术应用与商业的查杀工具中并进行了推广。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>58</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(4)基于语义的检测技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>59</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/192.htm' target='right'><span class='red'>基于语义的检测技术是现在研究的热点。</span></a><span class='green'>因为 混淆技术只是通过插入垃圾指令、改变指令顺序及寄存器重新分配等方法来改变程序,但是程序的基本语义是等价的。通过分析恶意程序,抽象程序指令的行为并建立其行为模型,使得该模型既描述恶意程序的基本行为,又具有很强的泛化能力。这样因其有很强的泛化能力,使得检测恶意程序的变种更加方便快捷。</span><a href='../sentence_detail/193.htm' target='right'><span class='orange'>除此之外,也可以检测未知类型的恶意代码。</span></a><span class='green'>现阶段基于语义的检测方法分为基于内存和函数调用的方法。</span><a href='../sentence_detail/194.htm' target='right'><span class='orange'>M.Christodorescu[8][9]提出了一套抽象理论和语义框架,使用自动机描述程序的行为,</span></a><span class='green'></span><a href='../sentence_detail/195.htm' target='right'><span class='orange'>通过抽象理论描述程序的行为建立抽象模式库,并将其作为自动机的符号表,</span></a><span class='green'>最终经恶意行为描述为自动机表述的模板,</span><a href='../sentence_detail/196.htm' target='right'><span class='orange'>最后通过模型检测方法检测样本是否含有恶意行为。</span></a><span class='green'></span><a href='../sentence_detail/197.htm' target='right'><span class='red'>模型检测是通过 遍历系统所有状态空间,</span></a><span class='green'>看其中是否有一条符合的路径状态。</span><a href='../sentence_detail/198.htm' target='right'><span class='orange'>之后,他还提出迹语义这一概念,将迹语义作为程序的基本语义,并定义了等价的条件,通过 抽象解释的方法给出了近似的检测算法。</span></a><span class='green'>抽象解释理论为解决不可判定和复杂 问题的逼近求解提供可很好的构造方法。</span><a href='../sentence_detail/199.htm' target='right'><span class='orange'>基于函数调用的方法是将程序中使用的函数提取出来,</span></a><span class='green'>并结合程序的控制流程图,通过图的同构、线性时态逻辑、计算逻辑树、有穷状态机及下推自动机等方法描述恶意行为,最终通过模型检 测完成恶意代码的检测。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>60</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(5)基于机器学习的检测技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>61</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/200.htm' target='right'><span class='red'>基于机器学习和数据挖掘的检测方法。</span></a><span class='green'></span><a href='../sentence_detail/201.htm' target='right'><span class='orange'>随着检测技术的不断发展,机器学习和数据挖掘的方法已经被开始应用在恶意代码检测的领域。</span></a><span class='green'>主要应用分类、关联规则挖掘、序列模式分析以及聚类等几种技术。主要思想是利用数据挖掘技术从现有的数据中挖掘一些有意义的模式,用机器学习技术归纳出已有样本的特征,然后根据特征的相似性等完成分类的任务。</span><a href='../sentence_detail/202.htm' target='right'><span class='orange'>其中,最主要的是选择好的特征和有效的分类器。</span></a><span class='green'>检测步骤如下:首先,要分析样本确定提取哪种特征或者特征序列;其次,根据特征的特性选择合适的特征选择方法从所有提取的特征中选择一些分类效果好的特征;最后,</span><a href='../sentence_detail/203.htm' target='right'><span class='orange'>根据实际情况选择较好的模型实现分类。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>62</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>2.2.2 恶意代码反检测技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>63</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/204.htm' target='right'><span class='orange'>恶意代码检测与反检测技术总是相互促进,</span></a><span class='green'>相辅相成。</span><a href='../sentence_detail/205.htm' target='right'><span class='orange'>检测技术的进步也带动了反检测技术的发展,</span></a><span class='green'></span><a href='../sentence_detail/206.htm' target='right'><span class='orange'>当前出现了各种各样的恶意代码反检测技术,</span></a><span class='green'>现总结如下:</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>64</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(1)加壳技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>65</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>恶意代码作者为了防止自己的程序被检测软件发现,利用一些软件技术给恶意代码加外壳,可以是利用算法将自己伪装成正常程序,或者利用特殊的算法将自己压缩或加密,使得检测软件很难检测。但是这些“壳”都有一个特点就是,</span><a href='../sentence_detail/207.htm' target='right'><span class='orange'>他们先于程序获得执行控制权,</span></a><span class='green'></span><a href='../sentence_detail/208.htm' target='right'><span class='orange'>然后把伪装后的程序还原,再把执行权交还给原始代码:</span></a><span class='green'>是一类自修改代码。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>66</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(2)反虚拟执行技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>67</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>不可否认,虚拟执行的系统和真实系统或多或少存在差异[41]。比如,硬件上,调试器总是会设置硬件断点,而虚拟机总是在模拟硬件,这和真实的硬件是有差别的;执行环境,内核地址空间,对于虚拟机和真正的机器是不同的,还有调试器必须挂靠某些进程来插桩进程用于监控;应用程序,</span><a href='../sentence_detail/209.htm' target='right'><span class='orange'>虚拟机和调试器都有外部应用程序,</span></a><span class='green'>对进程可见,用于检查运行环境。一些指令在虚拟机环境中,执行时间总是远远长于真实环境,一个经常执行此类指令的程序能够指示它在虚拟机环境中运行。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>68</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(3)代码迷惑技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>69</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>恶意代码迷惑技术是指通过某种程序代码变换,改变自身在空间和时间上的结构,但是完成相同的逻辑功能。恶意代码在进行迷惑处理之后,使得逆向工程分析变得难以进行。迷惑技术本身是一种保护软件的手段,但是常常被用来对抗分析和检测。恶意代码的迷惑技术可以有效的对抗恶意代码的静态分析技术和动态反汇编技术。目前主要有基于加密的迷惑技术和基于代码变换的迷惑术。其中代码变换主要指在源程序中,利用等价指令替换、指令位置交换、添加新指令等手段改变程序形式,但逻辑功能保持不变。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>70</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>2.3 恶意代码分析技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>71</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>恶意代码分析是确定恶意代码意图的过程,是实行恶意代码检测的必要前提。恶意代码分析的直接结果是用于实现恶意行为建模的元数据信息,</span><a href='../sentence_detail/210.htm' target='right'><span class='orange'>如指令流、API调用序列等,</span></a><span class='green'></span><a href='../sentence_detail/211.htm' target='right'><span class='orange'>为后续恶意代码的检测工作提供必要的支持。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>72</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/212.htm' target='right'><span class='orange'>恶意代码的分析技术一般可分为静态分析和动态分析。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>73</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(1)静态分析技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>74</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/213.htm' target='right'><span class='orange'>静态分析技术是指对被测软件的源程序或者二进制码进行扫描,从语法、语义的层面去理解程序的行为,以期望获取程序在运行过程中的信息,</span></a><span class='green'>而不需要运行程序。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>75</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>要进行恶意代码的静态分析,</span><a href='../sentence_detail/214.htm' target='right'><span class='orange'>首先需要对恶意程序进行反汇编,</span></a><span class='green'></span><a href='../sentence_detail/215.htm' target='right'><span class='orange'>常用的反汇编工具有:W32DASM、objdump、PEid、HIEW、IDA Pro等。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>76</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/216.htm' target='right'><span class='orange'>静态分析技术由于不会运行程序,</span></a><span class='green'>因此不会对计算机系统造成任何伤害,</span><a href='../sentence_detail/217.htm' target='right'><span class='orange'>其分析效率相对动态分析而言较高,</span></a><span class='green'>同时由于静态分析技术从程序本身入手,因此可以获得程序的全部信息,分析结果较为全面。但是由于静态分析技术的前提条件是对程序进行正确的反汇编,现如今很多恶意代码编写者常常会对恶意代码进行加壳、加密或者压缩使得恶意程序很难被正确的反汇编。总之,</span><a href='../sentence_detail/218.htm' target='right'><span class='orange'>如果恶意代码无法被正确的反汇编,</span></a><span class='green'>那么静态分析将会失效。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>77</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>(2)动态分析技术</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>78</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>动态分析技术是指在可控环境下实际运行程序,监控执行过程中的程序行为,记录程序执行的信息。</span><a href='../sentence_detail/219.htm' target='right'><span class='orange'>由于动态分析需要先运行程序,</span></a><span class='green'></span><a href='../sentence_detail/220.htm' target='right'><span class='orange'>所以为了防止恶意代码对当前环境的破坏,</span></a><span class='green'>系统在普或者恶意代码相关信息之后,会自动恢复到恶意代码执行前的最初状态,防止影响下一次的分析结果,但是动态分析技术能够获得恶意代码执行时的真实信息,可以有效地解决静态分析中譬如加壳、加密的干扰。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>79</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>当前最流行的动态分析技术是动态污点分析技术[38],它的基本原理是将一切不信任的外部数据标记为污点,</span><a href='../sentence_detail/221.htm' target='right'><span class='orange'>然后跟踪标记为污点的数据的传播情况,</span></a><span class='green'>并记录相关的系统调用或者指令执行等相关信息,然后以此信息进行检测。动态污点分析能够记录恶意代码更细粒度的精确特征,</span><a href='../sentence_detail/222.htm' target='right'><span class='orange'>是当前非常热门的恶意代码检测技术。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>80</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>动态分析技术也存在缺陷,比如开销大,一次只能分析一条路径,恶法应对恶意代码存在多路径的问题,同时由于恶法模拟出一个完全真实的计算机环境,</span><a href='../sentence_detail/223.htm' target='right'><span class='orange'>对某些环境敏感的恶意代码无法进行有效的检测,</span></a><span class='green'>因为恶意代码能够检测到虚拟机或者仿真机存在的情况,从而隐藏自身的真实行为,也无法知道某些恶意代码何时才会触发,动态分析技术也会受到行为层的混淆技术的干扰[39]如等价行为替换、模拟序列或者混淆序列等。于是有学者开始尝试静态分析与动态分析相结合[40]的方式进行恶意代码的检测,充分利用两种分析技术的优点。</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>81</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'>两种分析技术各有优缺点,静态分析技术开销小,关注的是恶意程序本身的语法或者结构特征,动态分析技术开销大,</span><a href='../sentence_detail/224.htm' target='right'><span class='orange'>关注的是恶意代码的行为特征,</span></a><span class='green'>各有侧重点。静态分析技术分析全面,可获得恶意代码的全部信息,但获取特征的方式一般都是无导向的,因此可能包含大量无用信息,也易受代码迷惑技术的影响,</span><a href='../sentence_detail/225.htm' target='right'><span class='orange'>动态分析技术能够获得程序的真实行为信息,</span></a><span class='green'>但一次只能获得一种行为并且与当前的检测环境相关,信息不够全面。当前应用最为广泛的技术还是静态分析技术。总之,</span><a href='../sentence_detail/226.htm' target='right'><span class='orange'>无论是静态分析还是动态分析,</span></a><span class='green'>都需要借助恶意代码分析技术和监控技术获得恶意代码的基本属性和执行信息,</span><a href='../sentence_detail/227.htm' target='right'><span class='orange'>以便深入理解恶意代码的功能,</span></a><span class='green'></span><a href='../sentence_detail/228.htm' target='right'><span class='orange'>进一步实现恶意代码的检测和抑制。</span></a><span class='green'></span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>82</div></td><td>&nbsp;&nbsp;</td></tr></table><span class='green'>2.4 本章小结</span></p></div></p>
    		<p style="margin:2px"><div><p><table border='0' width='100%' cellspacing='0' cellpadding='0'><tr><td align='left' width='50'><div class='shubu'>83</div></td><td>&nbsp;&nbsp;</td></tr></table><span style='margin-left:25px'></span><span class='green'></span><a href='../sentence_detail/229.htm' target='right'><span class='orange'>本章首先介绍了恶意代码的定义以及恶意代码的分类,</span></a><span class='green'>具体介绍了病毒、特洛伊木马、蠕虫等恶意代码的特征和危害。其次,</span><a href='../sentence_detail/230.htm' target='right'><span class='orange'>介绍了恶意代码的检测技术,详细阐述了基于特征码的检测技术、基于行为的检测技术、基于启发式的检测技术、基于语义的检测技术和基于机器学习的检测技术。</span></a><span class='green'>最后,针对目前主流的恶意代码反检测手段以及分析技术做了详细说明。</span></p></div></p>
    </div>

<div class="zhengwencenter">
</div>
<div style="margin-bottom:50px"></div>

</body>
</html>
